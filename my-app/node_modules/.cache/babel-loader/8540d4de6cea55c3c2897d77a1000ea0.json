{"ast":null,"code":"var _jsxFileName = \"/Users/architbubber/GITHUB/trackme/nore/my-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Map from \"mapmyindia-react\";\nimport './App.css';\nimport { lat1, long1 } from './location.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar lat, long;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: '',\n      post: '',\n      responseToPost: ''\n    };\n\n    this.callApi = async () => {\n      console.log(window.location.href.substring(33));\n\n      if (window.location.href.search('update') > 0) {\n        const response = await fetch(window.location.href.substring(33));\n        const body = await response.json();\n        if (response.status !== 200) throw Error(body.message);\n        return body;\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://trackmebaby.herokuapp.com/db').then(response => response.json()).then(data => {\n      lat = parseFloat(data.results[0].latitude);\n      long = parseFloat(data.results[0].longitude);\n    });\n    this.callApi().then(res => this.setState({\n      response: res.express\n    })).catch(err => console.log(err));\n  }\n\n  get() {\n    lat = lat1;\n    long = long1;\n    console.log('lat=' + lat + \" long=\" + long);\n    return 1;\n  }\n\n  render() {\n    //if(this.get()){\n    console.log(\"this is\" + lat);\n    return /*#__PURE__*/_jsxDEV(Map, {\n      markers: [{\n        position: [parseFloat(lat), parseFloat(long)],\n        draggable: true,\n        title: \"Am here!!\"\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this); //}\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/architbubber/GITHUB/trackme/nore/my-app/src/App.js"],"names":["React","Component","Map","lat1","long1","lat","long","App","state","response","post","responseToPost","callApi","console","log","window","location","href","substring","search","fetch","body","json","status","Error","message","componentDidMount","then","data","parseFloat","results","latitude","longitude","res","setState","express","catch","err","get","render","position","draggable","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,WAAP;AACA,SAAQC,IAAR,EAAaC,KAAb,QAAyB,eAAzB;;AACA,IAAIC,GAAJ,EAAQC,IAAR;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BO,KAD0B,GAClB;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,IAAI,EAAE,EAFA;AAGNC,MAAAA,cAAc,EAAE;AAHV,KADkB;;AAAA,SAiB1BC,OAjB0B,GAiBhB,YAAY;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,SAArB,CAA+B,EAA/B,CAAZ;;AACA,UAAGH,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBE,MAArB,CAA4B,QAA5B,IAAsC,CAAzC,EAA2C;AAC3C,cAAMV,QAAQ,GAAG,MAAMW,KAAK,CAACL,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,SAArB,CAA+B,EAA/B,CAAD,CAA5B;AACA,cAAMG,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAT,EAAnB;AACA,YAAIb,QAAQ,CAACc,MAAT,KAAoB,GAAxB,EAA6B,MAAMC,KAAK,CAACH,IAAI,CAACI,OAAN,CAAX;AAC7B,eAAOJ,IAAP;AACC;AACF,KAzByB;AAAA;;AAM1BK,EAAAA,iBAAiB,GAAG;AAElBN,IAAAA,KAAK,CAAC,sCAAD,CAAL,CACCO,IADD,CACMlB,QAAQ,IAAEA,QAAQ,CAACa,IAAT,EADhB,EAECK,IAFD,CAEMC,IAAI,IAAE;AAAEvB,MAAAA,GAAG,GAACwB,UAAU,CAACD,IAAI,CAACE,OAAL,CAAa,CAAb,EAAgBC,QAAjB,CAAd;AAAyCzB,MAAAA,IAAI,GAACuB,UAAU,CAACD,IAAI,CAACE,OAAL,CAAa,CAAb,EAAgBE,SAAjB,CAAf;AAA6C,KAFpG;AAIA,SAAKpB,OAAL,GACGe,IADH,CACQM,GAAG,IAAI,KAAKC,QAAL,CAAc;AAAEzB,MAAAA,QAAQ,EAAEwB,GAAG,CAACE;AAAhB,KAAd,CADf,EAEGC,KAFH,CAESC,GAAG,IAAIxB,OAAO,CAACC,GAAR,CAAYuB,GAAZ,CAFhB;AAGD;;AAYCC,EAAAA,GAAG,GAAE;AACLjC,IAAAA,GAAG,GAACF,IAAJ;AACAG,IAAAA,IAAI,GAACF,KAAL;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAOT,GAAP,GAAW,QAAX,GAAoBC,IAAhC;AACA,WAAO,CAAP;AACD;;AAEHiC,EAAAA,MAAM,GAAG;AACP;AACE1B,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAUT,GAAtB;AACF,wBACE,QAAC,GAAD;AACE,MAAA,OAAO,EAAE,CACL;AACImC,QAAAA,QAAQ,EAAE,CAAEX,UAAU,CAACxB,GAAD,CAAZ,EAAoBwB,UAAU,CAACvB,IAAD,CAA9B,CADd;AAEImC,QAAAA,SAAS,EAAE,IAFf;AAGIC,QAAAA,KAAK,EAAC;AAHV,OADK;AADX;AAAA;AAAA;AAAA;AAAA,YADF,CAHO,CAcL;AAGH;;AAnD2B;;AAsD5B,eAAenC,GAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport Map from \"mapmyindia-react\";\nimport './App.css';\nimport {lat1,long1} from './location.js';\nvar lat,long;\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: '',\n  };\n  componentDidMount() {\n    \n    fetch('https://trackmebaby.herokuapp.com/db')\n    .then(response=>response.json())\n    .then(data=>{ lat=parseFloat(data.results[0].latitude);long=parseFloat(data.results[0].longitude); })\n\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  }\n\n  callApi = async () => {\n    console.log(window.location.href.substring(33));\n    if(window.location.href.search('update')>0){\n    const response = await fetch(window.location.href.substring(33));\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    return body;\n    }\n  };\n  \n    get(){\n    lat=lat1;\n    long=long1;\n    console.log('lat='+lat+\" long=\"+long);\n    return 1;\n  }\n  \nrender() {\n  //if(this.get()){\n    console.log(\"this is\"+lat);\n  return (\n    <Map\n      markers={[\n          { \n              position: [ parseFloat(lat) , parseFloat(long)],\n              draggable: true, \n              title:\"Am here!!\",\n          }\n      ]}\n      />\n );\n    //}\n  \n\n}\n}\n\nexport default App;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}